#!/bin/bash 
 
 
 # This script is used for taking snapshots for SVT EOMSYS db vms. The procedure is as below: 
 #1. stop the db instances in sequence: standby db servers; master db servers 
 #2. take snapshots 
 #3. start the instances in sequence: master db servers; standby db servers. 
 
 
 export AWS_DEFAULT_REGION="ap-southeast-2" 
 #export AWS_PROFILE="tcp-aws0007-nprod-int" 
 ec2UsmDbFilter="EOMSYS-EC2Instances-SVT_ec2UsmDb" 
 ec2BpmDbFilter="EOMSYS-EC2Instances-SVT_ec2BpmDb" 
 logFile="/tmp/snapshotlog" 
 
 
 vmRunning="running" 
 vmStopped="stopped" 
 currStatus="" 
 
 
 function checkVmStatus() { 
         statusVMExp=$1 
         vmId=$2 
         if [[ -n "$statusVMExp" && -n "$vmId" ]]; then 
                 echo "checking the vm status, the vm is $vmId" 
 
 
                 waitLoop=0 
                 currStatus=$(aws ec2 describe-instances --instance-ids $vmId --query 'Reservations[].Instances[].State.Name' --output text) 
                 while [ $currStatus != $statusVMExp ] 
                 do 
                         let "waitLoop++" 
                         if [ $waitLoop -ge 5 ]; then echo "the vm reponse time out!" && break; fi 
                         sleep 15 
 #                        sleep 1 
                         currStatus=$(aws ec2 describe-instances --instance-ids $vmId --query 'Reservations[].Instances[].State.Name' --output text) 
                         echo "$currStatus" 
                 done 
                 echo "after waiting,, the vm stauts is: $currStatus" 
         else 
                 currStatus="" 
                 echo "something wrong with the status or instanceId!" 
         fi 
 } 
 
 
 if [ -f $logFile ] 
 then 
         cat /dev/null > $logFile 
 else 
         touch $logFile 
 fi 
 
 
 i=0 
 for instId in `aws ec2 describe-instances --filters 'Name=tag:Name,Values=EOMSYS-EC2Instances-SVT_ec2UsmDb*' |grep InstanceId | awk -F: '{print $2}' |awk -F'"' '{print $2}'` 
 do 
         instIds[$i]=$instId 
         let "i++" 
 done 
 
 
 for instId in `aws ec2 describe-instances --filters 'Name=tag:Name,Values=EOMSYS-EC2Instances-SVT_ec2BpmDb*' |grep InstanceId | awk -F: '{print $2}' |awk -F'"' '{print $2}'` 
 do 
         instIds[$i]=$instId 
         let "i++" 
 done 
 
 
 #stop the instances, firtly the two standy servers, then the another two active servers 
 nInsts=${#instIds[*]} 
 #for (( i = 0; i <= ($nInsts-1); i++ )) 
 #do 
 #        echo the instance is: ${instIds[i]} 
 #done 
 
 
 #adjust the sequence in the instance ID array 
 #echo "put the passive servers first" 
 temp=${instIds[0]} 
 instIds[0]=${instIds[3]} 
 instIds[3]=$temp 
 
 
 for (( i = 0; i <= ($nInsts-1); i++ )) 
 do 
         echo the instance is: ${instIds[i]} 
 done 
 
 
 for (( i = 0; i <= ($nInsts-1); i++ )) 
 do 
 #        instId=$(echo ${instIds[i]} | awk -F'"' '{print $2}') 
         instId=${instIds[i]} 
         echo "stop the vm $instId" 
         aws ec2 stop-instances --instance-ids $instId 
 
 
         if ((i % 2)) 
         then 
 #                sleep 2 
                 sleep 20 
                 checkVmStatus $vmStopped $instId 
 
 
                 if [ $currStatus == $vmStopped ] 
                 then 
                         j=$(($i-1)) 
                         instIdp=$(echo ${instIds[j]} | awk -F'"' '{print $2}') 
                         echo "the other instance as the same role: $instIdp" 
                         sleep 15 
 #                        sleep 1 
                         runStatus2=$(aws ec2 describe-instances --instance-ids $instIdp --query 'Reservations[].Instances[].State.Name' --output text) 
                         if [ $runStatus2 != $vmStopped ] 
                         then 
                                 echo "the instance $instIdp stop timed out, please check" 
                                 exit 
                         fi 
                 else 
                         echo "vm $instId stop time out! Please check!" 
                         exit 
                 fi 
         fi 
 done 
 
 
 #take snapshots of all the volumes 
 #for instId in "${instIds[@]}" 
 for instId in ${instIds[@]} 
 do 
 #        instId=$(echo ${instId} | awk -F'"' '{print $2}') 
          
         echo "The instance is: $instId" 
 
 
         tagSnapshot=`aws ec2 describe-tags --filters "Name=resource-id,Values=$instId" --query 'Tags[?Key==\`Name\`].Value' --output text` 
         tagSnapshot+="-" 
         tagSnapshot+=`date +%d%m%Y` 
         echo "the snapshot tag is: $tagSnapshot" 
 
 
         retStatus=$(aws ec2 describe-instances --instance-ids $instId --query 'Reservations[].Instances[].State.Name' --output text) 
         echo "the current vm status is: $retStatus" 
 
 
         if [ $retStatus == "stopped" ] 
 #        if [ $retStatus == "running" ] 
         then 
                 for volId in `aws ec2 describe-instances --instance-ids $instId --query 'Reservations[].Instances[].BlockDeviceMappings[].Ebs.VolumeId[]' --output text` 
                 do 
                         echo "the volume is: $volId" 
 #                        echo "the volumes are: $volId" >> $logFile 
                         snapshotId=`aws ec2 create-snapshot --volume-id $volId --description "take snapshot by script" |grep "SnapshotId" |awk -F'"' '{print $4}'` 
 #                        snapshotId="snap-12345678" 
                         echo "the snapshotId is: $snapshotId" 
                         sleep 5 
                         if [[ $snapshotId=~"snap-.*" ]] 
                         then 
 #                               echo "create tag here!"  
                                 aws ec2 create-tags --resources $snapshotId --tags Key=Name,Value=$tagSnapshot 
                         else 
                                 echo "something wrong with snapshot, please check!" 
                         fi 
                 done 
         else 
                 echo "VM $instId stop timeout, please check its status!" 
                 exit 
         fi 
 done 
 
 
 #start the instances, firstly start the active ones, then standby ones in case any failover happens 
 for (( i = ($nInsts-1); i >= 0; i-- )) 
 do 
 #        instId=$(echo ${instIds[i]} | awk -F'"' '{print $2}') 
         instId=${instIds[i]} 
         echo "starting the vm $instId" 
 
 
         curStatus=$(aws ec2 describe-instances --instance-ids $instId --query 'Reservations[].Instances[].State.Name' --output text) 
         if [ $curStatus == "stopped" ] 
 #        if [ $curStatus == "running" ] 
         then 
 #                echo "start the instance..." 
                 aws ec2 start-instances --instance-ids $instId 
         else 
                 continue 
         fi 
 
 
         if ! ((i % 2)) 
         then 
                 sleep 20 
 #                sleep 1 
                 checkVmStatus $vmRunning $instId 
 
 
                 if [ $currStatus == "running" ] 
                 then 
                         j=$(($i+1)) 
 #                        instIdp=$(echo ${instIds[j]} | awk -F'"' '{print $2}') 
                         instIdp=${instIds[j]} 
                         echo "the other instance as the same role: $instIdp" 
                         sleep 15 
 #                        sleep 1 
                         runStatus2=$(aws ec2 describe-instances --instance-ids $instIdp --query 'Reservations[].Instances[].State.Name' --output text) 
                         if [ $runStatus2 != "running" ] 
                         then 
                                 echo "the instance $instIdp starting timed out, please check" 
                                 break 
                         fi 
                 else 
                         echo "vm $instId starting time out! Please check!" 
                         exit 
                 fi 
         fi 
 done 
